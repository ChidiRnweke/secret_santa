name: Build, Push and Deploy backend

on:
  push:
    branches:
      - main
      - master
    paths:
      - "backend/**"
      - "docker-compose.yml"
      - "docker-compose.override.yml"
      - ".github/workflows/backend.yaml"
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml build --push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create a .env file with Infisical secrets
        run: |
          echo "INFISICAL_CLIENT_ID=${{ secrets.INFISICAL_CLIENT_ID }}" >> .env
          echo "INFISICAL_CLIENT_SECRET=${{ secrets.INFISICAL_CLIENT_SECRET }}" >> .env
          echo "INFISICAL_PROJECT_ID=${{ secrets.INFISICAL_PROJECT_ID }}" >> .env
          echo "INFISICAL_URL=${{ secrets.INFISICAL_URL }}" >> .env
          echo "INFISICAL_ENVIRONMENT=production" >> .env

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create project directory if it doesn't exist
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'mkdir -p ~/${{ vars.PROJECT }}'

      - name: Copy compose files
        run: scp -o StrictHostKeyChecking=no docker-compose.yml .env ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/${{ vars.PROJECT }}

      - name: Deploy to server
        run: ssh -o StrictHostKeyChecking=accept-new ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'cd ~/${{ vars.PROJECT }} && docker compose -f docker-compose.yml --env-file .env up -d --pull always && rm docker-compose.yml'
